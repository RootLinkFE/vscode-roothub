{
  "name": "roothub",
  "displayName": "RootHub",
  "description": "RootHub 前端研发平台",
  "version": "1.0.1",
  "author": "giscafer <giscafer@outlook.com>",
  "repository": {
    "type": "git",
    "url": "https://github.com/RootLinkFE/vscode-roothub.git"
  },
  "license": "MIT",
  "keywords": [
    "roothub",
    "codegen",
    "vscode",
    "frontend"
  ],
  "publisher": "giscafer",
  "icon": "resources/logo.png",
  "engines": {
    "vscode": "^1.65.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "roothub",
          "title": "RootHub 前端研发平台",
          "icon": "resources/logo.svg"
        }
      ]
    },
    "views": {
      "roothub": [
        {
          "id": "views.welcome",
          "name": "Welcome"
        },
        {
          "id": "views.tools",
          "name": "Tools"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "views.welcome",
        "contents": "欢迎使用 RootHub。\n[打开RootHub](http://roothub.leekhub.com/)\n查看[文档](https://marketplace.visualstudio.com/items?itemName=giscafer.roothub)以学习如何在 VS Code 中如何使用 RootHub App。"
      },
      {
        "view": "view.tools",
        "contents": "出错了！！欢迎提Issues >> [Github](https://github.com/RootLinkFE/vscode-roothub)"
      }
    ],
    "commands": [
      {
        "command": "roothub.helloWorld",
        "title": "Hello World"
      }
    ],
    "configuration": {
      "properties": {
        "codegen.custom-method": {
          "type": "array",
          "default": [
            {
              "key": "avueTable",
              "label": "avueTable",
              "type": "response",
              "source": "custom",
              "language": "vue",
              "description": "avue-table组件自定义方法",
              "status": 1,
              "sort": 99,
              "function": "/**\n * @description: generateAvueTablePageCode\n * selectedData\n * selectedData.requestSelectedData 请求参数-勾选\n * selectedData.responseSelectedData 响应参数-勾选\n * selectedData.modelData 模型参数-勾选\n * selectedData.resourceDetail 当前api菜单完整数据\n * window.utilsFn: {\n    getApiNameAsPageName: any;\n    prettyCode: any;\n    generateTableColumnsProps: any;\n    cleanParameterDescription: any;\n  },\n * @return {string}\n */\n\nfunction generateAvueTablePageCode(selectedData, api) {\n  const utilsFn = window.utilsFn ?? {};\n  const { responseSelectedData: body } = selectedData;\n\n  const parametersSet = new Set();\n  (api?.parameters ?? []).forEach((param) => {\n    parametersSet.add(param.name);\n  });\n  const columnCode = utilsFn.generateTableColumnsProps(body, true, (row, index) => {\n    let result = {\n      prop: row.name,\n      label: utilsFn.cleanParameterDescription(row.description),\n      minWidth: 150,\n      overHidden: true,\n    };\n    const item = parametersSet.has(row.name);\n    if (item) {\n      result.search = true;\n\n      if (\n        row.name.indexOf('状态') !== -1 ||\n        (row.description && row.description.indexOf('ENUM#') !== -1) ||\n        (row.enum && row.enum.length > 0)\n      ) {\n        result.searchType = 'select';\n      }\n      if (['date', 'time'].includes(row.name)) {\n        result.searchType = 'datetime';\n        result.format = 'YYYY-MM-DD HH:mm:ss';\n        result.valueFormat = 'YYYY-MM-DD HH:mm:ss';\n      }\n    }\n    return result;\n  });\n\n  const componentName = utilsFn.getApiNameAsPageName(api.api);\n  const matchApiName = api?.api.match(/^\\/api\\/[a-zA-Z]+/);\n  const apiName = matchApiName && matchApiName?.length > 0 ? matchApiName[0].replace('/api/', '') : '';\n\n  return `\n  /**  * ${api.description ?? api.summary} */\n    <template>\n    <avue-crud\n      :data=\"records\"\n      :page=\"pagination\"\n      :table-loading=\"loading\"\n      v-model:search=\"searchParams\"\n      :option=\"option\"\n      v-enter=\"handleSearch\"\n      @on-load=\"handleSearch\"\n      @search-reset=\"handleSearch\"\n      @refresh-change=\"handleSearch\"\n      @search-change=\"handleSearch\"\n      @size-change=\"handleSearch\"\n      @current-change=\"handleSearch\"\n    >\n    </avue-crud>\n    </template>\n    \n    <script setup>\n    import { ref, computed } from 'vue';\n    import { crudOptions } from '@/core/crud';\n    import {\n      packTableQueryParams,\n      usePageRequest,\n    } from '@/util/businessUtil';\n    import { fetch${componentName}List } from '@/api/${apiName}';\n  \n    const searchParams = ref({});\n    \n    const option = computed(() => ({\n      ...crudOptions(),\n      addBtn: false,\n      editBtn: false,\n      delBtn: false,\n      searchMenuSpan: 24,\n      searchLabelWidth: 120,\n      minWidth: 150,\n      header: true,\n      menu: false,\n      column: ${columnCode},\n    }));\n  \n    const {\n      records,\n      pagination,\n      loading,\n      run: fetchTableData,\n    } = usePageRequest(fetch${componentName}List, {\n      manual: true,\n    });\n  \n    const handleSearch = (params, done) => {\n      const tmp = packTableQueryParams(\n        ...searchParams.value,\n        pagination\n      );\n      fetchTableData(tmp)\n        .then((res) => {\n          return res;\n        })\n        .finally(done);\n    };\n    </script>\n    <style></style>\n    `;\n}\n"
            },
            {
              "key": "avueApiRequest",
              "label": "avueApiRequest",
              "type": "api",
              "source": "custom",
              "language": "javascript",
              "description": "avue-api-request",
              "status": 1,
              "sort": 98,
              "function": "/**\n* avue-api-request\n*/\nfunction generateApiDefineition(apiData) {\n  const { api, summary, method } = apiData;\n\n  const apiMatch = api.match(/[a-zA-Z0-9]*$/);\n  // window.lodash\n  const name = apiMatch && apiMatch.length > 0 ? lodash.camelCase(`${method} ${apiMatch[0]}`) : lodash.camelCase(api);\n\n  return `\n/**\n * ${summary}\n */\n export const ${name || 'fetch'} = (params) => {\n  return request(\n    {\n      url: '${api}',\n      method: '${method}'\n      params\n    }\n  ).then(responseHandle);\n};\n  `;\n}"
            }
          ],
          "description": "自定义代码生成方法"
        },
        "codegen.setting": {
          "type": "object",
          "default": {},
          "description": "codegen基础设置"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "prepackage": "bash ./scripts/build-codegen.sh",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "deploy": "vsce publish --yarn"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.0",
    "@types/node": "14.x",
    "@types/vscode": "^1.65.0",
    "@typescript-eslint/eslint-plugin": "^5.12.1",
    "@typescript-eslint/parser": "^5.12.1",
    "@vscode/test-electron": "^2.1.2",
    "copy-webpack-plugin": "^10.2.4",
    "eslint": "^8.9.0",
    "glob": "^7.2.0",
    "mocha": "^9.2.1",
    "ts-loader": "^9.2.6",
    "typescript": "^4.5.5",
    "vsce": "^2.6.7",
    "webpack": "^5.69.1",
    "webpack-cli": "^4.9.2"
  },
  "dependencies": {
    "axios": "^0.26.0",
    "bufferutil": "^4.0.6",
    "event-emitter-enhancer": "^2.0.0",
    "eventemitter2": "^6.4.5",
    "events": "^3.3.0",
    "fs-extra": "^10.0.1",
    "get-port": "5.1.1",
    "karma-chrome-launcher": "^3.1.0",
    "os-name": "^5.0.1",
    "public-ip": "^5.0.0",
    "puppeteer-core": "^13.4.1",
    "utf-8-validate": "^5.0.8",
    "uuid": "^8.3.2",
    "which-chrome": "^0.1.1"
  }
}
